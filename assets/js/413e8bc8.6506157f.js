"use strict";(self.webpackChunkdocdevtron=self.webpackChunkdocdevtron||[]).push([[4137],{4348:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"setup/install/install-devtron-in-airgapped-environment","title":"Devtron Installation in an Airgapped Environment","description":"Introduction","source":"@site/docs/setup/install/install-devtron-in-airgapped-environment.md","sourceDirName":"setup/install","slug":"/setup/install/install-devtron-in-airgapped-environment","permalink":"/docs-devtron/docs/setup/install/install-devtron-in-airgapped-environment","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Install Devtron on Minikube, Microk8s, K3s, Kind, Cloud VMs","permalink":"/docs-devtron/docs/setup/install/Install-devtron-on-Minikube-Microk8s-K3s-Kind"},"next":{"title":"Devtron Kubernetes Client","permalink":"/docs-devtron/docs/setup/install/install-devtron-Kubernetes-client"}}');var i=r(4848),s=r(8453);const a={},o="Devtron Installation in an Airgapped Environment",l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Docker Instructions",id:"docker-instructions",level:2},{value:"Platform Selection",id:"platform-selection",level:3},{value:"For Linux/amd64",id:"for-linuxamd64",level:4},{value:"For Linux/arm64",id:"for-linuxarm64",level:4},{value:"Podman Instructions",id:"podman-instructions",level:2},{value:"For Multi-arch",id:"for-multi-arch",level:3},{value:"Devtron Installation",id:"devtron-installation",level:2},{value:"Get the latest Devtron Helm Chart",id:"get-the-latest-devtron-helm-chart",level:3},{value:"Install Devtron without any Integration",id:"install-devtron-without-any-integration",level:3},{value:"Installing Devtron with CI/CD Mode",id:"installing-devtron-with-cicd-mode",level:3},{value:"Install Devtron with CICD Mode including Argocd",id:"install-devtron-with-cicd-mode-including-argocd",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"devtron-installation-in-an-airgapped-environment",children:"Devtron Installation in an Airgapped Environment"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"In certain scenarios, you may need to deploy Devtron to a Kubernetes cluster that isn\u2019t connected to the internet. Such air-gapped environments are used for various reasons, particularly in industries with strict regulatory requirements like healthcare, banking, and finance. This is because air-gapped environments aren't exposed to the public internet; therefore, they create a controlled and secure space for handling sensitive data and operations."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Try Devtron Enterprise for free \u2014 unlock advanced features built for scale. ",(0,i.jsx)(n.a,{href:"https://license.devtron.ai/dashboard",children:"Start Free Trial"})]})}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Install ",(0,i.jsx)(n.code,{children:"podman"})," or ",(0,i.jsx)(n.code,{children:"docker"})," on the VM from where you're executing the installation commands."]}),"\n",(0,i.jsx)(n.li,{children:"Get the latest image file"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl -LO https://raw.githubusercontent.com/devtron-labs/devtron/refs/heads/main/devtron-images.txt.source\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["Set the values of ",(0,i.jsx)(n.code,{children:"TARGET_REGISTRY"}),", ",(0,i.jsx)(n.code,{children:"TARGET_REGISTRY_USERNAME"}),", and ",(0,i.jsx)(n.code,{children:"TARGET_REGISTRY_TOKEN"}),". This registry should be accessible from the VM where you are running the cloning script and the K8s cluster where you\u2019re installing Devtron."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"warning",children:(0,i.jsxs)(n.p,{children:["If you are using Docker, the TARGET_REGISTRY should be in the format ",(0,i.jsx)(n.code,{children:"docker.io/<USERNAME>"})]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"docker-instructions",children:"Docker Instructions"}),"\n",(0,i.jsx)(n.h3,{id:"platform-selection",children:"Platform Selection"}),"\n",(0,i.jsx)(n.h4,{id:"for-linuxamd64",children:"For Linux/amd64"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'export PLATFORM="linux/amd64"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"for-linuxarm64",children:"For Linux/arm64"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'export PLATFORM="linux/arm64"\n'})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Set the environment variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set the source registry URL\nexport SOURCE_REGISTRY="quay.io/devtron"\n\n# Set the target registry URL, username, and token/password\nexport TARGET_REGISTRY=""\nexport TARGET_REGISTRY_USERNAME=""\nexport TARGET_REGISTRY_TOKEN=""\n\n# Set the source and target image file names with default values if not already set\nSOURCE_IMAGES_LIST="${SOURCE_IMAGES_LIST:=devtron-images.txt.source}"\nTARGET_IMAGES_LIST="${TARGET_IMAGES_LIST:=devtron-images.txt.target}"\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Log in to the target Docker registry"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker login -u $TARGET_REGISTRY_USERNAME -p $TARGET_REGISTRY_TOKEN $TARGET_REGISTRY\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Clone the images"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'while IFS= read -r source_image; do\n  # Check if the source image belongs to the quay.io/devtron registry\n  if [[ "$source_image" == quay.io/devtron/* ]]; then\n    # Replace the source registry with the target registry in the image name\n    target_image="${source_image/quay.io\\/devtron/$TARGET_REGISTRY}"\n\n  # Check if the source image belongs to the quay.io/argoproj registry\n  elif [[ "$source_image" == quay.io/argoproj/* ]]; then\n    # Replace the source registry with the target registry in the image name\n    target_image="${source_image/quay.io\\/argoproj/$TARGET_REGISTRY}"\n\n  # Check if the source image belongs to the public.ecr.aws/docker/library registry\n  elif [[ "$source_image" == public.ecr.aws/docker/library/* ]]; then\n    # Replace the source registry with the target registry in the image name\n    target_image="${source_image/public.ecr.aws\\/docker\\/library/$TARGET_REGISTRY}"\n  fi\n\n  # Pull the image from the source registry\n  docker pull --platform $PLATFORM $source_image\n\n  # Tag the image with the new target registry name\n  docker tag $source_image $target_image\n\n  # Push the image to the target registry\n  docker push $target_image\n\n  # Output the updated image name\n  echo "Updated image: $target_image"\n\n  # Append the new image name to the target image file\n  echo "$target_image" >> "$TARGET_IMAGES_LIST"\n\ndone < "$SOURCE_IMAGES_LIST"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"podman-instructions",children:"Podman Instructions"}),"\n",(0,i.jsx)(n.h3,{id:"for-multi-arch",children:"For Multi-arch"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Set the environment variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'export SOURCE_REGISTRY="quay.io/devtron"\nexport SOURCE_REGISTRY_TOKEN=#Enter token provided by Devtron team\nexport TARGET_REGISTRY=#Enter target registry url\nexport TARGET_REGISTRY_USERNAME=#Enter target registry username\nexport TARGET_REGISTRY_TOKEN=#Enter target registry token/password\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Log in to the target Podman registry"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"podman login -u $TARGET_REGISTRY_USERNAME -p $TARGET_REGISTRY_TOKEN $TARGET_REGISTRY\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Clone the images"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'SOURCE_REGISTRY="quay.io/devtron"\nTARGET_REGISTRY=${TARGET_REGISTRY}\nSOURCE_IMAGES_FILE_NAME="${SOURCE_IMAGES_FILE_NAME:=devtron-images.txt.source}"\nTARGET_IMAGES_FILE_NAME="${TARGET_IMAGES_FILE_NAME:=devtron-images.txt.target}"\n\ncp $SOURCE_IMAGES_FILE_NAME $TARGET_IMAGES_FILE_NAME\nwhile read source_image; do\n  if [[ "$source_image" == *"workflow-controller:"* || "$source_image" == *"argoexec:"* || "$source_image" == *"argocd:"* ]]\n  then\n    SOURCE_REGISTRY="quay.io/argoproj"\n    sed -i "s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g" $TARGET_IMAGES_FILE_NAME\n  elif [[ "$source_image" == *"redis:"* ]]\n  then\n    SOURCE_REGISTRY="public.ecr.aws/docker/library"\n    sed -i "s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g" $TARGET_IMAGES_FILE_NAME\n  else\n    SOURCE_REGISTRY="quay.io/devtron"\n    sed -i "s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g" $TARGET_IMAGES_FILE_NAME\n  fi\ndone <$SOURCE_IMAGES_FILE_NAME\necho "Target Images file finalized"\n\nwhile read -r -u 3 source_image && read -r -u 4 target_image ; do\n  echo "Pushing $source_image $target_image"\n  podman manifest create $source_image\n  podman manifest add $source_image $source_image --all\n  podman manifest push $source_image $target_image --all\ndone 3<"$SOURCE_IMAGES_FILE_NAME" 4<"$TARGET_IMAGES_FILE_NAME"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"devtron-installation",children:"Devtron Installation"}),"\n",(0,i.jsx)(n.p,{children:"Before starting, ensure you have created an image pull secret for your registry if authentication is required."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create the namespace (if not already created)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl create ns devtroncd\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create the Docker registry secret"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtroncd \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you are installing Devtron with the CI/CD module or using Argo CD, create the secret in the following namespaces else, you can skip this step-:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtron-cd \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\nkubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtron-ci \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\nkubectl create secret docker-registry devtron-imagepull \\\n  --namespace argo \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"get-the-latest-devtron-helm-chart",children:"Get the latest Devtron Helm Chart"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"helm pull devtron-operator --repo http://helm.devtron.ai\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This would download the tar file of the devtron-operator chart, Make sure to replace the ",(0,i.jsx)(n.code,{children:"<devtron-chart-file>"})," in the installation commands with this file name."]}),"\n",(0,i.jsx)(n.h3,{id:"install-devtron-without-any-integration",children:"Install Devtron without any Integration"}),"\n",(0,i.jsx)(n.p,{children:"Use the below command to install Devtron without any Integrations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Without ",(0,i.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> -n devtroncd --set global.containerRegistry="$TARGET_REGISTRY" --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> -n devtroncd --set global.containerRegistry="$TARGET_REGISTRY" --set global.imagePullSecrets[0].name=devtron-imagepull --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"installing-devtron-with-cicd-mode",children:"Installing Devtron with CI/CD Mode"}),"\n",(0,i.jsx)(n.p,{children:"Use the below command to install Devtron with only the CI/CD module"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Without ",(0,i.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> -n devtroncd --set installer.modules={cicd} --set global.containerRegistry="$TARGET_REGISTRY" --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> -n devtroncd --set installer.modules={cicd} --set global.containerRegistry="$TARGET_REGISTRY" --set global.imagePullSecrets[0].name=devtron-imagepull --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"install-devtron-with-cicd-mode-including-argocd",children:"Install Devtron with CICD Mode including Argocd"}),"\n",(0,i.jsx)(n.p,{children:"Use the below command to install Devtron with the CI/CD module and Argo CD"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Without ",(0,i.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> --create-namespace -n devtroncd --set installer.modules={cicd} --set argo-cd.enabled=true --set global.containerRegistry="$TARGET_REGISTRY" --set argo-cd.global.image.repository="${TARGET_REGISTRY}/argocd" --set argo-cd.redis.image.repository="${TARGET_REGISTRY}/redis" --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> --create-namespace -n devtroncd --set installer.modules={cicd} --set argo-cd.enabled=true --set global.containerRegistry="$TARGET_REGISTRY" --set argo-cd.global.image.repository="${TARGET_REGISTRY}/argocd" --set argo-cd.redis.image.repository="${TARGET_REGISTRY}/redis" --set global.imagePullSecrets[0].name=devtron-imagepull --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.p,{children:["After installation, refer ",(0,i.jsx)(n.a,{href:"https://docs.devtron.ai/install/install-devtron-with-cicd-with-gitops#devtron-dashboard",children:"Devtron installation documentation"})," for further steps, including obtaining the dashboard URL and the admin password."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);