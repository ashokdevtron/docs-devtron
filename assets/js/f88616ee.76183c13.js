"use strict";(self.webpackChunkdocdevtron=self.webpackChunkdocdevtron||[]).push([[3124],{2997:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"user-guide/use-cases/connect-expressjs-with-mongodb-database","title":"Connect Expressjs With Mongodb Database","description":"Introduction","source":"@site/docs/user-guide/use-cases/connect-expressjs-with-mongodb-database.md","sourceDirName":"user-guide/use-cases","slug":"/user-guide/use-cases/connect-expressjs-with-mongodb-database","permalink":"/docs-devtron/docs/user-guide/use-cases/connect-expressjs-with-mongodb-database","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Connect SpringBoot with Mysql Database","permalink":"/docs-devtron/docs/user-guide/use-cases/connect-springboot-with-mysql-database"},"next":{"title":"Connect Django With Mysql Database","permalink":"/docs-devtron/docs/user-guide/use-cases/connect-django-with-mysql-database"}}');var o=s(4848),i=s(8453);const r={},a="Connect Expressjs With Mongodb Database",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"<strong>1. Deploy mongoDb Helm Chart</strong>",id:"1-deploy-mongodb-helm-chart",level:2},{value:"<strong>2. Fork the Git Repository</strong>",id:"2-fork-the-git-repository",level:2},{value:"<em>*Dockerfile</em>",id:"dockerfile",level:3},{value:"<em>*db.js File</em>",id:"dbjs-file",level:3},{value:"<strong>3. Create Application on Devtron</strong>",id:"3-create-application-on-devtron",level:2},{value:"<em>*Git Repository</em>",id:"git-repository",level:3},{value:"<em>*Docker configuration</em>",id:"docker-configuration",level:3},{value:"<em>*Configure Deployment Template</em>",id:"configure-deployment-template",level:3},{value:"<em>*Set up the CI/CD Pipelines</em>",id:"set-up-the-cicd-pipelines",level:3},{value:"<em>*Trigger Pipelines</em>",id:"trigger-pipelines",level:3},{value:"<strong>4. Final Step</strong>",id:"4-final-step",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"connect-expressjs-with-mongodb-database",children:"Connect Expressjs With Mongodb Database"})}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"In this application, you will learn about how to create a Expressjs Application that connects to mongoDb."}),"\n",(0,o.jsx)(n.p,{children:"Follow the below-mentioned steps, to deploy the application on Devtron using mongoDb Helm Chart."}),"\n",(0,o.jsx)(n.h2,{id:"1-deploy-mongodb-helm-chart",children:(0,o.jsx)(n.strong,{children:"1. Deploy mongoDb Helm Chart"})}),"\n",(0,o.jsxs)(n.p,{children:["To deploy mongoDb Helm Chart, you can refer to our documentation on ",(0,o.jsx)(n.a,{href:"/docs-devtron/docs/user-guide/deploy-chart/examples/deploying-mongodb-helm-chart",children:"Deploy mongoDb Helm Chart"})]}),"\n",(0,o.jsx)(n.h2,{id:"2-fork-the-git-repository",children:(0,o.jsx)(n.strong,{children:"2. Fork the Git Repository"})}),"\n",(0,o.jsxs)(n.p,{children:["For this example, we are using the following ",(0,o.jsx)(n.a,{href:"https://github.com/devtron-labs/DockerNodeMongo",children:"GitHub Repo"}),", you can clone this repository and make following changes in the files."]}),"\n",(0,o.jsx)(n.h3,{id:"dockerfile",children:(0,o.jsx)(n.em,{children:"*Dockerfile"})}),"\n",(0,o.jsx)(n.p,{children:"This is the Dockerfile. This exposes our expressjs application to port number 8080"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"FROM node:7\nWORKDIR /app\nCOPY package.json /app\nRUN npm install\nCOPY . /app\nCMD node server.js\nEXPOSE 8080\n"})}),"\n",(0,o.jsx)(n.h3,{id:"dbjs-file",children:(0,o.jsx)(n.em,{children:"*db.js File"})}),"\n",(0,o.jsxs)(n.p,{children:["This file will be used to connect to our database. This will include the ",(0,o.jsx)(n.code,{children:"service-name"})," of the mongoDb Helm Chart, that you have deployed in Step1."]}),"\n",(0,o.jsx)(n.p,{children:"The syntax is as follows:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"<service-name>:27017/<database-name>"})}),"\n",(0,o.jsx)(n.p,{children:"This maps our service name to mongoDb's port number 27017."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"module.exports = {\n    DB: 'mondo-dev-mongodb-replicaset-client:27017/sale'\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"3-create-application-on-devtron",children:(0,o.jsx)(n.strong,{children:"3. Create Application on Devtron"})}),"\n",(0,o.jsxs)(n.p,{children:["To learn how to create an application on Devtron, refer to our documentation on ",(0,o.jsx)(n.a,{href:"../creating-application/",children:"Creating Application"})]}),"\n",(0,o.jsx)(n.h3,{id:"git-repository",children:(0,o.jsx)(n.em,{children:"*Git Repository"})}),"\n",(0,o.jsx)(n.p,{children:"In this example, we are using the url of the forked Git Repository."}),"\n",(0,o.jsx)(n.h3,{id:"docker-configuration",children:(0,o.jsx)(n.em,{children:"*Docker configuration"})}),"\n",(0,o.jsx)(n.p,{children:"Give, the path of the Dockerfile."}),"\n",(0,o.jsx)(n.h3,{id:"configure-deployment-template",children:(0,o.jsx)(n.em,{children:"*Configure Deployment Template"})}),"\n",(0,o.jsxs)(n.p,{children:["Enable ",(0,o.jsx)(n.code,{children:"Ingress"}),", and give the path on which you want to host the application."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/use-cases/connect-expressjs-with-mongodb-database/use-cases-springboot-view-student-data.jpg",alt:""})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/use-cases/connect-expressjs-with-mongodb-database/use-case-expressjs-ingress-template.jpg",alt:""})}),"\n",(0,o.jsx)(n.h3,{id:"set-up-the-cicd-pipelines",children:(0,o.jsx)(n.em,{children:"*Set up the CI/CD Pipelines"})}),"\n",(0,o.jsx)(n.p,{children:"Set up the CI/CD pipelines. You can set them to trigger automatically or manually."}),"\n",(0,o.jsx)(n.h3,{id:"trigger-pipelines",children:(0,o.jsx)(n.em,{children:"*Trigger Pipelines"})}),"\n",(0,o.jsxs)(n.p,{children:["Trigger the CI Pipeline, build should be ",(0,o.jsx)(n.strong,{children:"Successful"}),", then trigger the CD Pipeline, deployment pipeline will be initiated, after some time the status should be ",(0,o.jsx)(n.strong,{children:"Healthy"})]}),"\n",(0,o.jsx)(n.h2,{id:"4-final-step",children:(0,o.jsx)(n.strong,{children:"4. Final Step"})}),"\n",(0,o.jsx)(n.p,{children:"Check the Expressjs app connected to mongodb database, running successfully by hitting your application url."}),"\n",(0,o.jsxs)(n.p,{children:["The syntax is: ",(0,o.jsx)(n.code,{children:"http://<hostname>/<path>/"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"path"})})," will be the one that you have given in Step 3 while configuring the Deployment Template."]}),"\n",(0,o.jsx)(n.p,{children:"The output of our application would be as follows:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/use-cases/connect-expressjs-with-mongodb-database/use-case-expressjs-view-demo-data.jpg",alt:""})}),"\n",(0,o.jsx)(n.p,{children:"You can see that we are getting the JSON response. We have successfully connected our expressjs application to the mongoDb database."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);