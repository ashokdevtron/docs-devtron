"use strict";(self.webpackChunkdocdevtron=self.webpackChunkdocdevtron||[]).push([[4137],{1470:(e,n,t)=>{t.d(n,{A:()=>f});var r=t(6540),s=t(4164),a=t(7559),i=t(3104),o=t(6347),l=t(205),d=t(7485),c=t(1682),u=t(679);function h(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function g({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(s),(0,r.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function E(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=m(e),[i,o]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a})),[d,c]=p({queryString:t,groupId:s}),[h,E]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,u.Dv)(n);return[t,(0,r.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),R=(()=>{const e=d??h;return g({value:e,tabValues:a})?e:null})();(0,l.A)(()=>{R&&o(R)},[R]);return{selectedValue:i,selectValue:(0,r.useCallback)(e=>{if(!g({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),E(e)},[c,E,a]),tabValues:a}}var R=t(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(4848);function T({className:e,block:n,selectedValue:t,selectValue:r,tabValues:a}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=e=>{const n=e.currentTarget,s=o.indexOf(n),i=a[s].value;i!==t&&(l(n),r(i))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:r})=>(0,v.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:c,onClick:d,...r,className:(0,s.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function j({lazy:e,children:n,selectedValue:t}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function _(e){const n=E(e);return(0,v.jsxs)("div",{className:(0,s.A)(a.G.tabs.container,"tabs-container",x.tabList),children:[(0,v.jsx)(T,{...n,...e}),(0,v.jsx)(j,{...n,...e})]})}function f(e){const n=(0,R.A)();return(0,v.jsx)(_,{...e,children:h(e.children)},String(n))}},4348:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"setup/install/install-devtron-in-airgapped-environment","title":"Devtron Installation in an Airgapped Environment","description":"Introduction","source":"@site/docs/setup/install/install-devtron-in-airgapped-environment.md","sourceDirName":"setup/install","slug":"/setup/install/install-devtron-in-airgapped-environment","permalink":"/docs-devtron/docs/setup/install/install-devtron-in-airgapped-environment","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Ingress Setup","permalink":"/docs-devtron/docs/setup/install/ingress-setup"},"next":{"title":"Install Devtron Freemium","permalink":"/docs-devtron/docs/setup/install/freemium"}}');var s=t(4848),a=t(8453),i=t(1470),o=t(9365);const l={},d="Devtron Installation in an Airgapped Environment",c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Docker Instructions",id:"docker-instructions",level:2},{value:"Platform Selection",id:"platform-selection",level:3},{value:"For Linux/amd64",id:"for-linuxamd64",level:4},{value:"For Linux/arm64",id:"for-linuxarm64",level:4},{value:"Podman Instructions",id:"podman-instructions",level:2},{value:"For Multi-arch",id:"for-multi-arch",level:3},{value:"Devtron Installation",id:"devtron-installation",level:2},{value:"Get the Latest Devtron Helm Chart",id:"get-the-latest-devtron-helm-chart",level:3},{value:"Installation Commands",id:"installation-commands",level:3},{value:"Devtron Dashboard",id:"devtron-dashboard",level:3},{value:"Devtron Admin Credentials",id:"devtron-admin-credentials",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"devtron-installation-in-an-airgapped-environment",children:"Devtron Installation in an Airgapped Environment"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"In certain scenarios, you may need to deploy Devtron to a Kubernetes cluster that isn\u2019t connected to the internet. Such air-gapped environments are used for various reasons, particularly in industries with strict regulatory requirements like healthcare, banking, and finance. This is because air-gapped environments aren't exposed to the public internet; therefore, they create a controlled and secure space for handling sensitive data and operations."}),"\n",(0,s.jsxs)(n.admonition,{type:"success",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsxs)(n.p,{children:["Try Devtron Freemium to access all the enterprise features for free and forever, limited to adding one additional cluster. ",(0,s.jsx)(n.a,{href:"https://license.devtron.ai/dashboard",children:"Install Devtron Freemium"})]})]}),"\n",(0,s.jsxs)(n.admonition,{title:"Prerequisites",type:"warning",children:[(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Install ",(0,s.jsx)(n.code,{children:"podman"})," or ",(0,s.jsx)(n.code,{children:"docker"})," on the VM from where you're executing the installation commands."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Get the latest image file"}),"\n"]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -LO https://raw.githubusercontent.com/devtron-labs/devtron/refs/heads/main/devtron-images.txt.source\n"})}),(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Set the values of ",(0,s.jsx)(n.code,{children:"TARGET_REGISTRY"}),", ",(0,s.jsx)(n.code,{children:"TARGET_REGISTRY_USERNAME"}),", and ",(0,s.jsx)(n.code,{children:"TARGET_REGISTRY_TOKEN"}),". This registry should be accessible from the VM where you are running the cloning script and the K8s cluster where you\u2019re installing Devtron."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["If you are using Docker, the TARGET_REGISTRY should be in the format ",(0,s.jsx)(n.code,{children:"docker.io/<USERNAME>"})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"docker-instructions",children:"Docker Instructions"}),"\n",(0,s.jsx)(n.h3,{id:"platform-selection",children:"Platform Selection"}),"\n",(0,s.jsx)(n.h4,{id:"for-linuxamd64",children:"For Linux/amd64"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export PLATFORM="linux/amd64"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"for-linuxarm64",children:"For Linux/arm64"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export PLATFORM="linux/arm64"\n'})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Set the environment variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Set the source registry URL\nexport SOURCE_REGISTRY="quay.io/devtron"\n\n# Set the target registry URL, username, and token/password\nexport TARGET_REGISTRY=""\nexport TARGET_REGISTRY_USERNAME=""\nexport TARGET_REGISTRY_TOKEN=""\n\n# Set the source and target image file names with default values if not already set\nSOURCE_IMAGES_LIST="${SOURCE_IMAGES_LIST:=devtron-images.txt.source}"\nTARGET_IMAGES_LIST="${TARGET_IMAGES_LIST:=devtron-images.txt.target}"\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Log in to the target Docker registry"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker login -u $TARGET_REGISTRY_USERNAME -p $TARGET_REGISTRY_TOKEN $TARGET_REGISTRY\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Clone the images"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'while IFS= read -r source_image; do\n  # Check if the source image belongs to the quay.io/devtron registry\n  if [[ "$source_image" == quay.io/devtron/* ]]; then\n    # Replace the source registry with the target registry in the image name\n    target_image="${source_image/quay.io\\/devtron/$TARGET_REGISTRY}"\n\n  # Check if the source image belongs to the quay.io/argoproj registry\n  elif [[ "$source_image" == quay.io/argoproj/* ]]; then\n    # Replace the source registry with the target registry in the image name\n    target_image="${source_image/quay.io\\/argoproj/$TARGET_REGISTRY}"\n\n  # Check if the source image belongs to the public.ecr.aws/docker/library registry\n  elif [[ "$source_image" == public.ecr.aws/docker/library/* ]]; then\n    # Replace the source registry with the target registry in the image name\n    target_image="${source_image/public.ecr.aws\\/docker\\/library/$TARGET_REGISTRY}"\n  fi\n\n  # Pull the image from the source registry\n  docker pull --platform $PLATFORM $source_image\n\n  # Tag the image with the new target registry name\n  docker tag $source_image $target_image\n\n  # Push the image to the target registry\n  docker push $target_image\n\n  # Output the updated image name\n  echo "Updated image: $target_image"\n\n  # Append the new image name to the target image file\n  echo "$target_image" >> "$TARGET_IMAGES_LIST"\n\ndone < "$SOURCE_IMAGES_LIST"\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"podman-instructions",children:"Podman Instructions"}),"\n",(0,s.jsx)(n.h3,{id:"for-multi-arch",children:"For Multi-arch"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Set the environment variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export SOURCE_REGISTRY="quay.io/devtron"\nexport SOURCE_REGISTRY_TOKEN=#Enter token provided by Devtron team\nexport TARGET_REGISTRY=#Enter target registry url \nexport TARGET_REGISTRY_USERNAME=#Enter target registry username \nexport TARGET_REGISTRY_TOKEN=#Enter target registry token/password\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Log in to the target Podman registry"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"podman login -u $TARGET_REGISTRY_USERNAME -p $TARGET_REGISTRY_TOKEN $TARGET_REGISTRY\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Clone the images"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'SOURCE_REGISTRY="quay.io/devtron"\nTARGET_REGISTRY=${TARGET_REGISTRY}\nSOURCE_IMAGES_FILE_NAME="${SOURCE_IMAGES_FILE_NAME:=devtron-images.txt.source}"\nTARGET_IMAGES_FILE_NAME="${TARGET_IMAGES_FILE_NAME:=devtron-images.txt.target}"\n\ncp $SOURCE_IMAGES_FILE_NAME $TARGET_IMAGES_FILE_NAME\nwhile read source_image; do\n  if [[ "$source_image" == *"workflow-controller:"* || "$source_image" == *"argoexec:"* || "$source_image" == *"argocd:"* ]]\n  then\n    SOURCE_REGISTRY="quay.io/argoproj"\n    sed -i "s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g" $TARGET_IMAGES_FILE_NAME\n  elif [[ "$source_image" == *"redis:"* ]]\n  then\n    SOURCE_REGISTRY="public.ecr.aws/docker/library"\n    sed -i "s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g" $TARGET_IMAGES_FILE_NAME\n  else\n    SOURCE_REGISTRY="quay.io/devtron"\n    sed -i "s|${SOURCE_REGISTRY}|${TARGET_REGISTRY}|g" $TARGET_IMAGES_FILE_NAME\n  fi\ndone <$SOURCE_IMAGES_FILE_NAME\necho "Target Images file finalized"\n\nwhile read -r -u 3 source_image && read -r -u 4 target_image ; do\n  echo "Pushing $source_image $target_image"\n  podman manifest create $source_image\n  podman manifest add $source_image $source_image --all\n  podman manifest push $source_image $target_image --all\ndone 3<"$SOURCE_IMAGES_FILE_NAME" 4<"$TARGET_IMAGES_FILE_NAME"\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"devtron-installation",children:"Devtron Installation"}),"\n",(0,s.jsx)(n.p,{children:"Before starting, ensure you have created an image pull secret for your registry if authentication is required."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create the namespace (if not already created)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl create ns devtroncd\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create the Docker registry secret"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtroncd \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you are installing Devtron with the CI/CD module or using Argo CD, create the secret in the following namespaces else, you can skip this step-:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtron-cd \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\nkubectl create secret docker-registry devtron-imagepull \\\n  --namespace devtron-ci \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\nkubectl create secret docker-registry devtron-imagepull \\\n  --namespace argo \\\n  --docker-server=$TARGET_REGISTRY \\\n  --docker-username=$TARGET_REGISTRY_USERNAME \\\n  --docker-password=$TARGET_REGISTRY_TOKEN\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"get-the-latest-devtron-helm-chart",children:"Get the Latest Devtron Helm Chart"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"helm pull devtron-operator --repo http://helm.devtron.ai\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This would download the tar file of the devtron-operator chart, Make sure to replace the ",(0,s.jsx)(n.code,{children:"<devtron-chart-file>"})," in the installation commands with this file name."]}),"\n",(0,s.jsx)(n.h3,{id:"installation-commands",children:"Installation Commands"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(o.A,{label:"Without Integrations",value:"Without Integrations",children:[(0,s.jsx)(n.p,{children:"Use the below command to install Devtron without any integrations:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Without ",(0,s.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> -n devtroncd --set global.containerRegistry="$TARGET_REGISTRY" --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> -n devtroncd --set global.containerRegistry="$TARGET_REGISTRY" --set global.imagePullSecrets[0].name=devtron-imagepull --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n"]})]}),(0,s.jsxs)(o.A,{label:"With CI/CD",value:"With CI/CD",children:[(0,s.jsx)(n.p,{children:"Use the below command to install Devtron with only the CI/CD module"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Without ",(0,s.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> -n devtroncd --set installer.modules={cicd} --set global.containerRegistry="$TARGET_REGISTRY" --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> -n devtroncd --set installer.modules={cicd} --set global.containerRegistry="$TARGET_REGISTRY" --set global.imagePullSecrets[0].name=devtron-imagepull --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n"]})]}),(0,s.jsxs)(o.A,{label:"With CI/CD and GitOps (Argo CD)",value:"With CI/CD and GitOps (Argo CD)",children:[(0,s.jsx)(n.p,{children:"Use the below command to install Devtron with the CI/CD module and Argo CD"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Without ",(0,s.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> --create-namespace -n devtroncd --set installer.modules={cicd} --set argo-cd.enabled=true --set global.containerRegistry="$TARGET_REGISTRY" --set argo-cd.global.image.repository="${TARGET_REGISTRY}/argocd" --set argo-cd.redis.image.repository="${TARGET_REGISTRY}/redis" --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"imagePullSecrets"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'helm install devtron <devtron-chart-file> --create-namespace -n devtroncd --set installer.modules={cicd} --set argo-cd.enabled=true --set global.containerRegistry="$TARGET_REGISTRY" --set argo-cd.global.image.repository="${TARGET_REGISTRY}/argocd" --set argo-cd.redis.image.repository="${TARGET_REGISTRY}/redis" --set global.imagePullSecrets[0].name=devtron-imagepull --set-string components.devtron.customOverrides.IS_AIR_GAP_ENVIRONMENT=true\n'})}),"\n"]}),"\n"]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"devtron-dashboard",children:"Devtron Dashboard"}),"\n",(0,s.jsx)(n.p,{children:"Run the following command to get the Devtron dashboard URL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get svc -n devtroncd devtron-service \\\n-o jsonpath='{.status.loadBalancer.ingress}'\n"})}),"\n",(0,s.jsx)(n.p,{children:"You will get an output similar to the example shown below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"[map[hostname:aaff16e9760594a92afa0140dbfd99f7-305259315.us-east-1.elb.amazonaws.com]]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Use the hostname ",(0,s.jsx)(n.code,{children:"aaff16e9760594a92afa0140dbfd99f7-305259315.us-east-1.elb.amazonaws.com"})," (Loadbalancer URL) to access the Devtron dashboard."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),': If you do not get a hostname or receive a message that says "service doesn\'t exist," it means Devtron is still installing.\nPlease wait until the installation is completed.']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": You can also use a ",(0,s.jsx)(n.code,{children:"CNAME"})," entry corresponding to your domain/subdomain to point to the Loadbalancer URL to access at a customized domain."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Host"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Points to"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"devtron.yourdomain.com"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"CNAME"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"aaff16e9760594a92afa0140dbfd99f7-305259315.us-east-1.elb.amazonaws.com"})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"devtron-admin-credentials",children:"Devtron Admin Credentials"}),"\n",(0,s.jsx)(n.p,{children:"When you install Devtron for the first time, it creates a default admin user and password (with unrestricted access to Devtron). You can use that credentials to log in as an administrator."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Username"}),": ",(0,s.jsx)(n.code,{children:"admin"})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.strong,{children:"Password"}),": Run the following command to get the admin password:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl -n devtroncd get secret devtron-secret \\\n-o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"Next Recommended Action",type:"info",children:[(0,s.jsx)(n.p,{children:"When you install Devtron for the first time, it creates a default admin user and password (with unrestricted access to Devtron). You can use it to log in as an administrator."}),(0,s.jsxs)(n.p,{children:["After the initial login, we recommend you set up any ",(0,s.jsx)(n.a,{href:"/docs-devtron/docs/user-guide/global-configurations/sso-login",children:"Single Sign-On (SSO)"})," service like Google, GitHub, etc., and then add other users (including yourself). Subsequently, all the users can use the same SSO (e.g., GitHub) to log in to the Dashboard."]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsxs)(n.p,{children:["If you have questions, please let us know on our discord channel. ",(0,s.jsx)(n.a,{href:"https://discord.gg/jsRG5qx2gp",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/Join%20us%20on-Discord-e01563.svg",alt:"Join Discord"})})]})]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var r=t(4164);const s={tabItem:"tabItem_Ymn6"};var a=t(4848);function i({children:e,hidden:n,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,t),hidden:n,children:e})}}}]);